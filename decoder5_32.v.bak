module decoder5_32(in,en, o0,o1,o2,o3,o4,o5,o6,o7,o8,o9,o10,o11,o12,o13,o14,o15,o16,o17,o18,o19,
o20,o21,o22,o23,o24,o25,o26,o27,o28,o29,o30,o31);
	input[4:0] in;
	input en;
	output o0,o1,o2,o3,o4,o5,o6,o7,o8,o9,o10,o11,o12,o13,o14,o15,o16,o17,o18,o19,
	o20,o21,o22,o23,o24,o25,o26,o27,o28,o29,o30,o31;
	
	wire[4:0] n ;
	
	not n0(n[0],in[0]);
	not n1(n[1],in[1]);
	not n2(n[2],in[2]);
	not n3(n[3],in[3]);
	not n4(n[4],in[4]);
	
	
	and(o0, en, n[0],n[1], n[2], n[3], n[4]);
	and(o1, en, i[0],n[1], n[2], n[3], n[4]);
	and(o2, en, n[0],i[1], n[2], n[3], n[4]);
	and(o3, en, i[0],i[1], n[2], n[3], n[4]);
	and(o4, en, n[0],n[1], i[2], n[3], n[4]);
	and(o5, en, i[0],n[1], i[2], n[3], n[4]);
	and(o6, en, n[0],i[1], i[2], n[3], n[4]);
	and(o7, en, i[0],i[1], i[2], n[3], n[4]);
	and(o8, en, n[0],n[1], n[2], i[3], n[4]);
	and(o9, en, i[0],n[1], n[2], i[3], n[4]);
	and(o10, en, n[0],i[1], n[2], i[3], n[4]);
	and(o11, en, i[0],i[1], n[2], i[3], n[4]);
	and(o12, en, n[0],n[1], i[2], i[3], n[4]);
	and(o13, en, i[0],n[1], i[2], i[3], n[4]);
	and(o14, en, n[0],i[1], i[2], i[3], n[4]);
	and(o15, en, i[0],i[1], i[2], i[3], n[4]);
	and(o16, en, n[0],n[1], n[2], n[3], i[4]);
	and(o17, en, i[0],n[1], n[2], n[3], i[4]);
	and(o18, en, n[0],i[1], n[2], n[3], i[4]);
	and(o19, en, i[0],i[1], n[2], n[3], i[4]);
	and(o20, en, n[0],n[1], i[2], n[3], i[4]);
	and(o21, en, i[0],n[1], i[2], n[3], i[4]);
	and(o22, en, n[0],i[1], i[2], n[3], i[4]);
	and(o23, en, i[0],i[1], i[2], n[3], i[4]);
	and(o24, en, n[0],n[1], n[2], i[3], i[4]);
	and(o25, en, i[0],n[1], n[2], i[3], i[4]);
	and(o26, en, n[0],i[1], n[2], i[3], i[4]);
	and(o27, en, i[0],i[1], n[2], i[3], i[4]);
	and(o28, en, n[0],n[1], i[2], i[3], i[4]);
	and(o29, en, i[0],n[1], i[2], i[3], i[4]);
	and(o30, en, n[0],i[1], i[2], i[3], i[4]);
	and(o31, en, i[0],i[1], i[2], i[3], i[4]);
	
endmodule 