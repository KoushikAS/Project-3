// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/12/2022 16:17:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          decoder5_32
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decoder5_32_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] i;
// wires                                               
wire o0;
wire o1;
wire o2;
wire o3;
wire o4;
wire o5;
wire o6;
wire o7;
wire o8;
wire o9;
wire o10;
wire o11;
wire o12;
wire o13;
wire o14;
wire o15;
wire o16;
wire o17;
wire o18;
wire o19;
wire o20;
wire o21;
wire o22;
wire o23;
wire o24;
wire o25;
wire o26;
wire o27;
wire o28;
wire o29;
wire o30;
wire o31;

// assign statements (if any)                          
decoder5_32 i1 (
// port map - connection between master ports and signals/registers   
	.i(i),
	.o0(o0),
	.o1(o1),
	.o2(o2),
	.o3(o3),
	.o4(o4),
	.o5(o5),
	.o6(o6),
	.o7(o7),
	.o8(o8),
	.o9(o9),
	.o10(o10),
	.o11(o11),
	.o12(o12),
	.o13(o13),
	.o14(o14),
	.o15(o15),
	.o16(o16),
	.o17(o17),
	.o18(o18),
	.o19(o19),
	.o20(o20),
	.o21(o21),
	.o22(o22),
	.o23(o23),
	.o24(o24),
	.o25(o25),
	.o26(o26),
	.o27(o27),
	.o28(o28),
	.o29(o29),
	.o30(o30),
	.o31(o31)
);
initial 
begin 
#1000000 $finish;
end 
// i[ 4 ]
initial
begin
	i[4] = 1'b0;
	i[4] = #320000 1'b1;
	i[4] = #320000 1'b0;
	i[4] = #320000 1'b1;
end 
// i[ 3 ]
initial
begin
	repeat(3)
	begin
		i[3] = 1'b0;
		i[3] = #160000 1'b1;
		# 160000;
	end
	i[3] = 1'b0;
end 
// i[ 2 ]
initial
begin
	repeat(6)
	begin
		i[2] = 1'b0;
		i[2] = #80000 1'b1;
		# 80000;
	end
	i[2] = 1'b0;
end 
// i[ 1 ]
initial
begin
	repeat(12)
	begin
		i[1] = 1'b0;
		i[1] = #40000 1'b1;
		# 40000;
	end
	i[1] = 1'b0;
end 
// i[ 0 ]
always
begin
	i[0] = 1'b0;
	i[0] = #20000 1'b1;
	#20000;
end 
endmodule

